{"ast":null,"code":"import axios from 'axios';\n\n// axios.defaults.baseURL = 'http://localhost:8080';\n\nexport async function authentication(username) {\n  try {\n    return await axios.post('/api/auth', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Username does not exit...!\"\n    };\n  }\n}\nexport async function getUser(username) {\n  try {\n    const {\n      data\n    } = await axios.get('/api/user/${username}');\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password  does not match...!\"\n    };\n  }\n}\nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post('/api/register', credentials);\n    let {\n      username,\n      email\n    } = credentials;\n    if (status === 201) {\n      await axios.post('/api/resgisterMail', {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\nexport async function verifyPassword({\n  username,\n  password\n}) {\n  try {\n    if (username) {\n      const {\n        data\n      } = axios.post('/api/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Invalid password\"\n    });\n  }\n}\nexport async function updateUser(response) {\n  try {\n    const {\n      token\n    } = await localStorage.getItem('token');\n    const {\n      data\n    } = await axios.put('/api/updateuser', response, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Can not update user\"\n    });\n  }\n}\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recover your password `;\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error: \"Can not generate OTP\"\n    });\n  }\n}\nexport async function verifyOTP({\n  username,\n  code\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\nexport async function resetPassword(username, password) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","authentication","username","post","error","getUser","data","get","registerUser","credentials","msg","status","email","userEmail","text","Promise","resolve","reject","verifyPassword","password","updateUser","response","token","localStorage","getItem","put","headers","generateOTP","code","params","subject","verifyOTP","resetPassword"],"sources":["D:/login_app/client/src/helpers/helper.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n\r\n// axios.defaults.baseURL = 'http://localhost:8080';\r\n\r\nexport async function authentication(username) {\r\n    try {\r\n        return await axios.post('/api/auth', { username })\r\n    } catch (error) {\r\n        return { error: \"Username does not exit...!\" };\r\n    }\r\n}\r\n\r\nexport async function getUser(username) {\r\n    try {\r\n        const { data } = await axios.get('/api/user/${username}');\r\n        return { data }\r\n    } catch (error) {\r\n        return { error: \"Password  does not match...!\" };\r\n    }\r\n}\r\n\r\nexport async function registerUser(credentials) {\r\n    try {\r\n        const { data: { msg }, status } = await axios.post('/api/register', credentials);\r\n        let { username, email } = credentials\r\n        if (status === 201) {\r\n            await axios.post('/api/resgisterMail', { username, userEmail: email, text: msg })\r\n        }\r\n        return Promise.resolve(msg);\r\n\r\n    } catch (error) {\r\n        return Promise.reject({ error });\r\n\r\n    }\r\n}\r\n\r\nexport async function verifyPassword({ username, password }) {\r\n    try {\r\n        if (username) {\r\n            const { data } = axios.post('/api/login', { username, password });\r\n            return Promise.resolve({ data });\r\n        }\r\n    } catch (error) {\r\n        return Promise.reject({ error: \"Invalid password\" });\r\n    }\r\n}\r\n\r\nexport async function updateUser(response) {\r\n    try {\r\n        const { token, } = await localStorage.getItem('token');\r\n        const { data } = await axios.put('/api/updateuser', response, { headers: { \"Authorization\": `Bearer ${token}` } });\r\n        return Promise.resolve({ data });\r\n    } catch (error) {\r\n        return Promise.reject({ error: \"Can not update user\" });\r\n    }\r\n}\r\n\r\nexport async function generateOTP(username) {\r\n    try {\r\n        const { data: { code }, status } = await axios.get('/api/generateOTP', { params: { username } });\r\n        if (status === 201) {\r\n            let { data: { email } } = await getUser({ username });\r\n            let text = `Your Password Recovery OTP is ${code}. Verify and recover your password `;\r\n            await axios.post('/api/registerMail', { username, userEmail: email, text, subject: \"Password Recovery OTP\" });\r\n\r\n        }\r\n        return Promise.resolve(code);\r\n    } catch (error) {\r\n        return Promise.reject({ error: \"Can not generate OTP\" });\r\n    }\r\n}\r\n\r\nexport async function verifyOTP({ username, code }) {\r\n    try {\r\n        const { data, status } = await axios.get('/api/verifyOTP', { params: { username, code } })\r\n        return { data, status }\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}\r\n\r\nexport async function resetPassword(username, password) {\r\n    try {\r\n        const { data, status } = await axios.put('/api/resetPassword', { username, password })\r\n        return Promise.resolve({ data, status })\r\n    } catch (error) {\r\n        return Promise.reject({ error });\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}