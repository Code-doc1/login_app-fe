{"ast":null,"code":"import { toast } from \"react-hot-toast\";\nimport { authentication } from './helper';\n/**username validation */\n// export function usernameValidate(values) {\n//     const errors = usernameVerify({}, values)\n//     if (values.username) {\n//         const { status } = authentication(values.username);\n//         if (status !== 200) {\n//             errors.exists = toast.error('User does not exist...!')\n//         }\n//     }\n\n//     return errors;\n// }\n/**password validation */\nexport function passwordValidate(values) {\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n/**reset password validation */\nexport function resetPasswordValidate(values) {\n  const errors = passwordVerify({}, values);\n  if (values.password !== values.confirm_pwd) {\n    errors.exists = toast.error(\"Password does not match\");\n  }\n  return errors;\n}\n\n/**register form validation */\nexport async function registerValidation(values) {\n  const errors = usernameVerify({}, values);\n  passwordVerify(errors, values);\n  emailVerify(errors, values);\n  return errors;\n}\n\n/**password validation function */\nfunction passwordVerify(error = {}, values) {\n  const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    error.username = toast.error(\"password required...!\");\n  } else if (values.password.includes(\" \")) {\n    error.username = toast.error(\"Invalid password...!\");\n  } else if (values.password.length < 6) {\n    error.username = toast.error(\"Password should be more then 6 characters long...!\");\n  } else if (!specialChars.test(values.password)) {\n    error.username = toast.error(\"Password must have special characters...!\");\n  }\n  return error;\n}\n\n/**username validation function */\nfunction usernameVerify(error = {}, values) {\n  if (!values.username) {\n    error.username = toast.error(\"Username required...!\");\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error(\"Invalid username...!\");\n  }\n  return error;\n}\n\n/** validate email */\nfunction emailVerify(error = {}, values) {\n  if (!values.email) {\n    error.email = toast.error(\"Email Required...!\");\n  } else if (values.email.includes(\" \")) {\n    error.email = toast.error(\"Wrong Email...!\");\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    error.email = toast.error(\"Invalid email address...!\");\n  }\n  return error;\n}\n\n/**validate profile page */\nexport async function profileValidation(values) {\n  const errors = emailVerify({}, values);\n  return errors;\n}","map":{"version":3,"names":["toast","authentication","passwordValidate","values","errors","passwordVerify","resetPasswordValidate","password","confirm_pwd","exists","error","registerValidation","usernameVerify","emailVerify","specialChars","username","includes","length","test","email","profileValidation"],"sources":["D:/login_app/client/src/helpers/validate.js"],"sourcesContent":["import { toast } from \"react-hot-toast\";\r\nimport { authentication } from './helper';\r\n/**username validation */\r\n// export function usernameValidate(values) {\r\n//     const errors = usernameVerify({}, values)\r\n//     if (values.username) {\r\n//         const { status } = authentication(values.username);\r\n//         if (status !== 200) {\r\n//             errors.exists = toast.error('User does not exist...!')\r\n//         }\r\n//     }\r\n\r\n//     return errors;\r\n// }\r\n/**password validation */\r\nexport function passwordValidate(values) {\r\n    const errors = passwordVerify({}, values)\r\n\r\n    return errors;\r\n}\r\n\r\n/**reset password validation */\r\nexport function resetPasswordValidate(values) {\r\n    const errors = passwordVerify({}, values)\r\n\r\n    if (values.password !== values.confirm_pwd) {\r\n        errors.exists = toast.error(\"Password does not match\")\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n/**register form validation */\r\nexport async function registerValidation(values) {\r\n    const errors = usernameVerify({}, values);\r\n    passwordVerify(errors, values);\r\n    emailVerify(errors, values);\r\n\r\n    return errors;\r\n}\r\n\r\n\r\n/**password validation function */\r\nfunction passwordVerify(error = {}, values) {\r\n    const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\r\n\r\n    if (!values.password) {\r\n        error.username = toast.error(\"password required...!\")\r\n    } else if (values.password.includes(\" \")) {\r\n        error.username = toast.error(\"Invalid password...!\")\r\n    } else if (values.password.length < 6) {\r\n        error.username = toast.error(\"Password should be more then 6 characters long...!\")\r\n    } else if (!specialChars.test(values.password)) {\r\n        error.username = toast.error(\"Password must have special characters...!\")\r\n    }\r\n    return error;\r\n}\r\n\r\n/**username validation function */\r\nfunction usernameVerify(error = {}, values) {\r\n    if (!values.username) {\r\n        error.username = toast.error(\"Username required...!\")\r\n    } else if (values.username.includes(\" \")) {\r\n        error.username = toast.error(\"Invalid username...!\")\r\n    }\r\n    return error;\r\n}\r\n\r\n/** validate email */\r\nfunction emailVerify(error = {}, values) {\r\n    if (!values.email) {\r\n        error.email = toast.error(\"Email Required...!\");\r\n    } else if (values.email.includes(\" \")) {\r\n        error.email = toast.error(\"Wrong Email...!\")\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        error.email = toast.error(\"Invalid email address...!\")\r\n    }\r\n\r\n    return error;\r\n}\r\n\r\n/**validate profile page */\r\nexport async function profileValidation(values) {\r\n    const errors = emailVerify({}, values);\r\n    return errors;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}